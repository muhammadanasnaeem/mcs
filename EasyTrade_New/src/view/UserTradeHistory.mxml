<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 initialize="group1_initializeHandler(event)"
		 xmlns:common="common.*"
		 xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			import businessobjects.UserTradeBO;
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.Sheet;
			
			import components.FormPrintView;
			
			import mx.events.DataGridEvent;
			import mx.printing.FlexPrintJob;
			
			import spark.events.IndexChangeEvent;
			include "../components/SelectionMenu.as"
			include "../eventhandlers/UserTradeHistory.as"

			[Bindable]
			private var fields:Array=new Array();
			
			[Bindable]
			[Embed(source="images/xls.png")]
			public var ImgXls:Class;
			
			protected function btnExport_clickHandler(event:MouseEvent):void
			{
				//				var sheet:Sheet = new Sheet();				
				//				var dataProviderCollection:ArrayCollection = adgUserTradeHistory.dataProvider as ArrayCollection;  
				//				var rowCount:int = dataProviderCollection.length;  
				//				sheet.resize(rowCount + 1,adgRemainingOrders.columnCount);  
				//				var columns:Array = adgRemainingOrders.columns;  
				//				var i:int = 0;  
				//				for each (var field:DataGridColumn in columns){  
				//					fields.push(field.dataField.toString());  
				//					sheet.setCell(0,i,field.dataField.toString());  
				//					i++;  
				//				}  
				//				
				//				for(var r:int=0; r < rowCount; r++)  
				//				{  
				//					var record:Object = dataProviderCollection.getItemAt(r);  
				//					/*insert record starting from row no 2 else  
				//					headers will be overwritten*/  
				//					insertRecordInSheet(r+1,sheet,record);  
				//				}  
				//				var xls:ExcelFile = new ExcelFile();  
				//				xls.sheets.addItem(sheet);  
				//				
				//				var bytes: ByteArray = xls.saveToByteArray();				
				//				fr.save(bytes,"RemainingOrders.xls");				 
			}
			
			private function fileIOError_Handler(event:IOErrorEvent):void
			{
				Alert.show(Messages.FILE_IO_ERROR, Messages.TITLE_ERROR);
			}
			
			private function fileSaved_Handler(event:Event):void
			{
				Alert.show(Messages.FILE_SAVED_SUCCESS);
			}
			
			private function insertRecordInSheet(row:int, sheet:Sheet, record:Object):void
			{
				var colCount:int=adgUserTradeHistory.columnCount;
				for (var c:int; c < colCount; c++)
				{
					var i:int=0;
					for each (var field:String in fields)
					{
						//Alert.show(record[field]);
//						if (record[field] is Date)
//						{
//							sheet.setCell(row, i, record[field]);
//							var cell:Cell=sheet.getCell(row, i);
//							cell.format="D-MMM-YY";
//							cell.dateMode=1;
//							//cell.
//						}
//						else
							sheet.setCell(row, i, record[field]);
						i++;
					}
				}
			}
			// Created on 16/07/2012 by Anas for the print functionality
			protected function image1_clickHandler(event:MouseEvent):void
			{
				setTimeout(launchAlert2, 3000);
				
				function launchAlert2():void
				{
					trace('eee');
				}
				
				const printJob:FlexPrintJob = new FlexPrintJob(); 
				
				if ( printJob.start() ) 
				{ 
					var printDataGrid:FormPrintView = new FormPrintView(); 
					printDataGrid.myDataGrid.setStyle('wordWrap',true);
					printDataGrid.myDataGrid.setStyle('fontSize',14);
					printDataGrid.myDataGrid.width = printJob.pageWidth+550; 
					printDataGrid.myDataGrid.height = printJob.pageHeight; 
					printDataGrid.myDataGrid.dataProvider = ModelManager.getInstance().userTradeHistoryModel.userTradeHistory;
					printDataGrid.myDataGrid.columns = adgUserTradeHistory.columns;
					printDataGrid.myDataGrid.showHeaders = true;
					addElement(printDataGrid.myDataGrid); 
					while (printDataGrid.myDataGrid.validNextPage) 
					{ 
						printJob.addObject(printDataGrid.myDataGrid); 
					} 
					removeElement(printDataGrid.myDataGrid); 
					printJob.send(); 
				} 
				Alert.show('Printed Successfully','Information');	
			}

			protected function traders_changeHandler(event:IndexChangeEvent):void
			{
				ModelManager.getInstance().updateUserTradeHistory();
			}

			public function formatNegotiatedTrade(data:Object):String
			{
				var utBO:UserTradeBO=data as UserTradeBO;
				if (utBO)
				{
					if (utBO.SYMBOL_CODE.length > 0)
					{
						return utBO.IS_NEGOTIATED ? 'YES' : 'NO';
					}
				}
				return "";
			}
//0x0c70a2 : 0xbe3267
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"
						  formatString="DD/MM/YYYY LL:NN:SS A"/>
		<components:EZCurrencyFormatter id="moneyFormatter"/>
		<components:EZNumberFormatter id="numberFormatter"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer width="100%"
					   height="30"
					   horizontalCenter="0"
					   top="0">
		<s:Label text="Exchange:"
				 top="7"
				 horizontalCenter="-252"/>
		<components:EZDropDownTextInput width="49"
										top="2"
										height="20"
										id="txtExchange"
										editable="false"
										click="txtExchange_clickHandler(event)"
										horizontalCenter="-199"/>
		<s:Label text="Market:"
				 top="7"
				 horizontalCenter="-147"/>
		<components:EZDropDownTextInput width="49"
										top="2"
										height="20"
										id="txtMarket"
										editable="false"
										click="txtMarket_clickHandler(event)"
										horizontalCenter="-103"/>
		<s:Label text="Symbol:"
				 top="7"
				 horizontalCenter="-50"/>
		<s:TextInput width="110"
					 top="2"
					 height="20"
					 id="txtSymbol"
					 horizontalCenter="33"
					 keyDown="txtSymbol_keyDownHandler(event)"/>
	</s:BorderContainer>
	<components:EZDataGrid right="1"
						   left="1"
						   bottom="1"
						   top="30"
						   id="adgUserTradeHistory"
						   width="100%"
						   height="100%"
						   dataProvider="{ModelManager.getInstance().userTradeHistoryModel.userTradeHistoryGroups}"
						   headerRelease="adgUserTradeHistory_headerReleaseHandler(event)">
		<components:columns>
			<mx:DataGridColumn headerText="Symbol"
							   dataField="SYMBOL_CODE"
							   draggable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.SYMBOL}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="User"
							   dataField="USER"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.summary ? data.totalTxt : data.USER}"
								  width="100%"
								  textAlign="right"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Client"
							   dataField="CLIENT_CODE"
							   draggable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.data.CLIENT_CODE}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Order Number"
							   dataField="ORDER_ID"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>

						<mx:Label width="100%"
								  color="{(data.summary) ? 0x0c70a2: 0xffffff}"
								  text="{getBuyPriceSummaryValue(data)}"
								  textAlign="right">
							<fx:Script>
								<![CDATA[
									public function getBuyPriceSummaryValue(data:Object):String
									{
										if (data.mainSummary)
										{
											if (data.buyValueGrandTotal == "0")
											{
												return "";
											}
											return outerDocument.numberFormatter.format(data.buyValueGrandTotal);
										}
										else if (data.summary)
										{
											if (data.buyValueTotal == "0")
											{
												return "";
											}
											return outerDocument.numberFormatter.format(data.buyValueTotal);
										}
										else
										{
											return outerDocument.numberFormatter.format(data.ORDER_ID);
										}
									}
								]]>
							</fx:Script>
						</mx:Label>

					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<!--mx:DataGridColumn headerText="Exchange" dataField="EXCHANGE_CODE" />
			<mx:DataGridColumn headerText="Market" dataField="MARKET_CODE" /-->
			<mx:DataGridColumn headerText="Price"
							   dataField="PRICE"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label color="{(data.summary) ? 0x0c70a2: 0xffffff}"
								  text="{getBuyValueSummaryValue(data)}"
								  width="100%"
								  textAlign="right">
							<fx:Script>
								<![CDATA[
									public function getBuyValueSummaryValue(data:Object):String
									{
										if (data.mainSummary)
										{
											if (data.buyPriceGrandTotal == "0")
											{
												return "";
											}
											return outerDocument.moneyFormatter.format(data.buyPriceGrandTotal);
										}
										else if (data.summary)
										{
											if (data.buyPriceTotal == "0")
											{
												return "";
											}
											return outerDocument.moneyFormatter.format(data.buyPriceTotal);
										}
										else
										{
											return outerDocument.moneyFormatter.format(data.PRICE);
										}
									}
								]]>
							</fx:Script>
						</mx:Label>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Volume"
							   dataField="VOLUME"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label color="{(data.summary) ? 0x0c70a2: 0xffffff}"
								  text="{getSellPriceSummaryValue(data)}"
								  width="100%"
								  textAlign="right">
							<fx:Script>
								<![CDATA[
									public function getSellPriceSummaryValue(data:Object):String
									{
										if (data.mainSummary)
										{
											if (data.sellValueGrandTotal == "0")
											{
												return "";
											}
											return outerDocument.numberFormatter.format(data.sellValueGrandTotal);
										}
										else if (data.summary)
										{
											if (data.sellValueTotal == "0")
											{
												return "";
											}
											return outerDocument.numberFormatter.format(data.sellValueTotal);
										}
										else
										{
											return outerDocument.numberFormatter.format(data.VOLUME);
										}
									}
								]]>
							</fx:Script>
						</mx:Label>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Ticket ID"
							   dataField="TICKET_ID"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label color="{(data.summary) ? 0x0c70a2: 0xffffff}"
								  text="{getSellValueSummaryValue(data)}"
								  width="100%"
								  textAlign="right">
							<fx:Script>
								<![CDATA[
									public function getSellValueSummaryValue(data:Object):String
									{
										if (data.mainSummary)
										{
											if (data.sellPriceGrandTotal == "0")
											{
												return "";
											}
											return outerDocument.moneyFormatter.format(data.sellPriceGrandTotal);
										}
										else if (data.summary)
										{
											if (data.sellPriceTotal == "0")
											{
												return "";
											}
											return outerDocument.moneyFormatter.format(data.sellPriceTotal);
										}
										else
										{
											return outerDocument.numberFormatter.format(data.TICKET_ID);
										}
									}
								]]>
							</fx:Script>
						</mx:Label>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Time"
							   dataField="ENTRY_DATETIME"
							   width="150"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.dateFormatter.format(data.ENTRY_DATETIME)}"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Is Negotiated" visible="false"
							   dataField="IS_NEGOTIATED">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.formatNegotiatedTrade(data)}"
								  width="100%"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</components:columns>
	</components:EZDataGrid>
	<s:Button label="Refresh"
			  width="75"
			  height="20"
			  id="btnRefresh"
			  top="2"
			  horizontalCenter="133"
			  click="btnRefresh_clickHandler(event)"/>
	<s:Label text="Trader:"
			 horizontalCenter="195"
			 top="7"/>
	<s:DropDownList width="75"
					change="traders_changeHandler(event)"
					dataProvider="{tradersList}"
					height="20"
					id="traders"
					horizontalCenter="255"
					top="2"/>
</s:Group>
