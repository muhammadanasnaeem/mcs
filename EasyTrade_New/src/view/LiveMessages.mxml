<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer verticalCenter="0"
				   horizontalCenter="0"
				   x="0"
				   y="0"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%"
				   height="100%"
				   minHeight="200"
				   xmlns:flexlib="http://code.google.com/p/flexlib/"
				   xmlns:components="components.*"
				   creationComplete="bordercontainer1creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import controller.WindowManager;
			
			import flash.ui.ContextMenu;
			
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			import mx.events.FlexEvent;
			import mx.events.ScrollEvent;
			
			import org.alivepdf.display.Display;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.layout.Size;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
			
			import spark.components.VGroup;
			import spark.effects.Resize;
//			include "../eventhandlers/MarketMessage.as"
//			import 
			
			[Bindable]
			[Embed(source="../images/newsup.jpg")]
			private var newsUp:Class;
			
			[Bindable]
			[Embed(source="../images/newsover.jpg")]
			private var newsOver:Class;
			
			[Bindable]
			[Embed(source="../images/coporateannouceup.jpg")]
			private var corporateAnnouncementsUp:Class;
			
			[Bindable]
			[Embed(source="../images/corporateannounceover.jpg")]
			private var corporateAnnouncementsOver:Class;
			
			[Bindable]
			[Embed(source="../images/bulletinsupdown.jpg")]
			private var bulletinsUp:Class;
			
			[Bindable]
			[Embed(source="../images/bulletinsover.jpg")]
			private var bulletinsOver:Class;
			
			[Bindable]
			[Embed(source="../images/tradeactivityover.jpg")]
			private var tradeactivityOver:Class;
			
			[Bindable]
			[Embed(source="../images/tardeactivityup.jpg")]
			private var tradeactivityUp:Class;
			
			[Bindable]
			private var windowManager:WindowManager=WindowManager.getInstance();
			
			[Bindable]
			public var messagesArrayCol:ArrayCollection = new ArrayCollection();
			
			public var textBullet1:TextInput;
			public var flag2:Boolean=true;
			public var textBullet3:TextInput;
			public var flag3:Boolean=true;
			public var textBullet:TextInput;
			public var flag:Boolean=true;
			public var textBullet2:TextInput;
			public var marketMessages:Boolean=true
			private var item1:ContextMenuItem;
			public var fr:FileReference = new FileReference();
			public var tp:TextInput;
			[Bindable]
			private var pdfByte:ByteArray = new ByteArray();
			// we create the PDF
			[Bindable]
			private var myPDF:PDF = new PDF(  Orientation.PORTRAIT, Unit.MM, Size.A4 );
			
			protected function corporateAnnouncementsMouseOverHandler(event:MouseEvent):void
			{
				corporateAnnouncements.source=corporateAnnouncementsOver;
			}
			
			protected function corporateAnnouncementsMouseOutHandler(event:MouseEvent):void
			{
				corporateAnnouncements.source=corporateAnnouncementsUp;
			}
			
			protected function bulletinsMouseOutHandler(event:MouseEvent):void
			{
				bulletins.source=bulletinsUp;
			}
			
			protected function bulletinsMouseOverHandler(event:MouseEvent):void
			{
				bulletins.source=bulletinsOver;
			}
			
			protected function tradeActivityMouseOutHandler(event:MouseEvent):void
			{
			}
			
			protected function tradeActivityMouseOverHandler(event:MouseEvent):void
			{
			}
			
			protected function newsMouseOverHandler(event:MouseEvent):void
			{
				messages.source=newsOver;
			}
			
			protected function newsMouseOutHandler(event:MouseEvent):void
			{
				messages.source=newsUp;
			}
			
			protected function messagesBar_clickHandler(event:MouseEvent):void
			{
				if (event.currentTarget.id == "messages")
				{
					corporateAnnouncements.source=corporateAnnouncementsUp;
					bulletins.source=bulletinsUp;
					messages.source=newsOver;
					tradeActivity.source = tradeactivityUp;
					txaMessagess.visible=true;
					txaMessages.visible=false;
					txaCorporateAnnouncements.visible=false;
					txaBulletins.visible=false;
				}
				else if (event.currentTarget.id == "corporateAnnouncements")
				{
					tradeActivity.source = tradeactivityUp;
					corporateAnnouncements.source=corporateAnnouncementsOver;
					messages.source=newsUp;
					bulletins.source=bulletinsUp;
					txaMessages.visible=false;
					txaCorporateAnnouncements.visible=true;
					txaBulletins.visible=false;
					txaMessagess.visible=false;
				}
				else if (event.currentTarget.id == "bulletins")
				{
					tradeActivity.source = tradeactivityUp;
					messages.source=newsUp;
					corporateAnnouncements.source=corporateAnnouncementsUp;
					bulletins.source=bulletinsOver;
					txaMessages.visible=false;
					txaCorporateAnnouncements.visible=false;
					txaBulletins.visible=true;
					txaMessagess.visible=false;
				}
				else if (event.currentTarget.id == "tradeActivity")
				{
					tradeActivity.source = tradeactivityOver
					messages.source=newsUp;
					corporateAnnouncements.source=corporateAnnouncementsUp;
					bulletins.source=bulletinsUp;
					txaMessages.visible=true;
					txaCorporateAnnouncements.visible=false;
					txaBulletins.visible=false;
					txaMessagess.visible=false;
				}
			}
			
			protected function bordercontainer1creationCompleteHandler(event:FlexEvent):void
			{
				customizeContextMenu();  
				tradeActivity.source = tradeactivityOver
				txaMessages.visible=true;
				txaCorporateAnnouncements.visible=false;
				txaBulletins.visible=false;
			}
			
			
			
			//Custom Context Menu Handlers
			private function customizeContextMenu():void
			{
				// InteractiveObject objects as Application, Panel, Button, ... have a contextMenu 
				// property used to reference the ContextMenu to be displayed when right clicking 
				// on the component.
				// In most of the cases, this property is initialized to null and you have to
				// create a new ContextMenu object.
				// Note: this is not the case for the Application object.
				if (!contextMenu) {
					contextMenu = new ContextMenu();
				}
				
				// By default, the ContextMenu contains some Flash Player related menu items as
				// Print, Zoom, etc...
				// These menu items can be hidden as done below.
//				contextMenu.hideBuiltInItems();
				// You can also hide individual items by setting to false the corresponding
				// properties of the builtInItems property.
				// For example, to remove only the Print entry:
				//         contextMenu.builtInItems.print=false;
				
				/*
				Creation of some customized menu items
				
				Notes:
				
				Use the second parameter of ContextMenuItem constructor to add (true) or not (false)
				a separator in the menu before the entry.
				
				Customized items are put on top of the ContextMenu with one exception: if
				View Source is enabled, it will always remain as the first entry in the menu.
				
				If the debug Flash Player is used, debugging items will be displayed just
				after your customized entries and cannot be hidden.
				
				Parameters and Flash Player version entries are displayed at the bottom of
				the menu and cannot be hidden.
				
				When you right click a selectable or editable text field, clipboard entries
				(Cut/Copy/Paste/Clear/Select All) are automatically added to the menu and 
				cannot be removed.
				*/
//				item1 = new ContextMenuItem("Export to Excel", true);
				
				// Manage clicks on your customized items
//				item1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				
				// Add your customized entries to the menu            
//				contextMenu.customItems.push(item1);
				
				// Manage Menu selection to handle visibility or enablement changes
//				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);
			}
			
			// Handler when context menu is opened.
			// Use it to implement any enablement/visibility logic required for your
			// customized menu entries.        
			private function menuSelectHandler(event:ContextMenuEvent):void {
				// Toggle item2 enablement and item3 visibility each time the menu is displayed
//				item2.enabled = !item2.enabled;
//				item3.visible = !item3.visible;
			}
			
			private function menuItemHandler(event:ContextMenuEvent):void {
				switch (event.target) {
					case item1:
						var rowCount:int = messagesArrayCol.length; 
						var i:int=0;
						var sheet:Sheet = new Sheet();
						var vg:Canvas = new Canvas();
						var vb:VBox = new VBox();
						for(var r:int=0; r < rowCount; r++)  
						{  
							var record:Object = messagesArrayCol.getItemAt(r);
							
							tp = new TextInput();
							tp.text = record.toString();
							vb.addChild(tp);
							i++;
						}
							vgg.addChild(vb);
						myPDF.setDisplayMode ( Display.FULL_WIDTH ); 
						var ar:Array = vgg.getChildren();
						myPDF.addPage();
						myPDF.addImage(vgg);
						
						pdfByte = myPDF.save( Method.LOCAL,  "messages.pdf" );
						
						fr.addEventListener(Event.COMPLETE,fileReference_Complete);
						fr.save(pdfByte,"messages.pdf");	
						
						break;
				}
			}
			private function fileReference_Progress(event:ProgressEvent):void
			{
			}
			
			private function fileReference_Complete(event:Event):void
			{
				try
				{
				Alert.show("Exported to Excel.", event.currentTarget.caption);
				}catch(e:Error)
				{
					trace(e.message);
				}
			}
			
			
			
			private function generatePDF ( event:ContextMenuEvent ):void
			{
				try
				{
				
				// we set the zoom to 100%
				myPDF.setDisplayMode ( Display.FULL_PAGE ); 
				
				
				// we add a page
				myPDF.addPage();
				
				myPDF.addImage(vgg);
				// to save the PDF your specificy the path to the create.php script
				// alivepdf takes care of the rest, if you are using AIR and want to save the PDF locally just use Method.LOCAL
				// and save the returned bytes on the disk through the FileStream class
				pdfByte = myPDF.save( Method.LOCAL,  "messages.pdf" );
				
				fr.addEventListener(Event.COMPLETE,fileReference_Complete);
				fr.save(pdfByte,"messages.pdf");	
				}catch(e:Error)
				{
					trace(e.message);
				}
			}
			
			public function updateStatus2(msg:String):void
			{
				if (marketMessages == true)
				{
					messagesArrayCol.addItem(msg);
					textBullet1=new TextInput();
					textBullet1.setStyle("borderStyle", "none");
					textBullet1.setStyle("color", 0xffffff);
					textBullet1.setStyle("backgroundColor", 0x000000);
					textBullet1.htmlText+="<TEXTFORMAT>" + msg + "</font><br /></TEXTFORMAT>";
					textBullet1.width=vgroup.width
					textBullet1.editable=false;
					vgroup1.setStyle("backgroundColor", 0x000000);
					vgroup1.addChild(textBullet1);
					marketMessages=false;
				}
				else
				{
					messagesArrayCol.addItem(msg);
					textBullet1=new TextInput();
					textBullet1.setStyle("color", 0xffffff);
					textBullet1.setStyle("borderStyle", "none");
					textBullet1.setStyle("backgroundColor", 0x1e1e1e);
					textBullet1.htmlText+="<TEXTFORMAT>" + msg + "</font><br /></TEXTFORMAT>";
					textBullet1.width=vgroup.width
					textBullet1.editable=false;
					vgroup1.setStyle("backgroundColor", 0x1e1e1e);
					vgroup1.addChild(textBullet1);
					marketMessages=true;
				}
			}
			
			public function updateStatus(msg:String):void
			{
				messagesArrayCol.addItem(msg);
				txaMessages.visible=true;
				if (flag2 == true)
				{
					textBullet1=new TextInput();
					textBullet1.setStyle("color", 0xffffff);
					textBullet1.setStyle("borderStyle", "none");
					textBullet1.setStyle("backgroundColor", 0x000000);
					textBullet1.htmlText+="<TEXTFORMAT><font color='#FFFFFF'>" + msg + "</font><br /></TEXTFORMAT>";
					textBullet1.width=vgroup.width
					textBullet1.editable=false;
					vgroup1.setStyle("backgroundColor", 0x000000);
					vgroup1.addChild(textBullet1);
					flag2=false;
				}
				else if (flag2 == false)
				{
					messagesArrayCol.addItem(msg);
					textBullet1=new TextInput();
					textBullet1.setStyle("color", 0xffffff);
					textBullet1.setStyle("borderStyle", "none");
					textBullet1.setStyle("backgroundColor", 0x1e1e1e);
					textBullet1.htmlText+="<TEXTFORMAT><font color='#FFFFFF'>" + msg + "</font><br /></TEXTFORMAT>";
					textBullet1.width=vgroup.width
					textBullet1.editable=false;
					vgroup1.setStyle("backgroundColor", 0x1e1e1e);
					vgroup1.addChild(textBullet1);
					flag2=true;
				}
				
			}
			
			public function updateBulletin(msg:String):void
			{
				
				if (flag == true)
				{
					messagesArrayCol.addItem(msg);
					textBullet=new TextInput();
					textBullet.setStyle("color", 0xffffff);
					textBullet.setStyle("borderStyle", "none");
					textBullet.setStyle("backgroundColor", 0x000000);
					textBullet.htmlText+="<TEXTFORMAT><span style='background-color:#222021;'><font color='#FFFFFF'>" + msg + "</font><span><br /></TEXTFORMAT>";
					textBullet.width=vgroup.width
					textBullet.editable=false;
					vgroup.setStyle("backgroundColor", 0x000000);
					vgroup.addChild(textBullet);
					flag=false;
				}
				else
				{
					messagesArrayCol.addItem(msg);
					textBullet=new TextInput();
					textBullet.setStyle("color", 0xffffff);
					textBullet.setStyle("borderStyle", "none");
					textBullet.setStyle("backgroundColor", 0x1e1e1e);
					textBullet.htmlText+="<TEXTFORMAT><span style='background-color:#222021;'><font color='#FFFFFF'>" + msg + "</font><span><br /></TEXTFORMAT>";
					textBullet.width=vgroup.width
					textBullet.editable=false;
					vgroup.setStyle("backgroundColor", 0x1e1e1e);
					vgroup.addChild(textBullet);
					flag=true;
				}
			}
		]]>
	</fx:Script>
		
	<mx:Canvas  visible="false" width="100%"  id="vgg"/>
	<mx:Canvas borderStyle="none"
			   id="txaMessages"
			   width="100%"
			   left="0"
			   height="167"
			   backgroundColor="#000000"
			   minHeight="200"
			   color="#ffffff">
		<mx:VBox id="vgroup1"
				 width="100%" 
				 verticalGap="-2"
				 horizontalScrollPolicy="auto"
				 borderStyle="none"
				 borderColor="#000000"/>
	</mx:Canvas>
	<mx:Canvas borderStyle="none"
			   id="txaMessagess"
			   width="100%"
			   left="0"
			   height="167" visible="false"
			   backgroundColor="#000000"
			   minHeight="200"
			   color="#ffffff">
		<mx:VBox id="vgroup13"
				 width="100%"
				 verticalGap="-2"
				 horizontalScrollPolicy="auto"
				 borderStyle="none"
				 borderColor="#000000"/>
	</mx:Canvas>
	
	<mx:Canvas borderStyle="none"
			   id="txaCorporateAnnouncements"
			   width="100%"
			   left="0"
			   height="167"
			   backgroundColor="#000000"
			   minHeight="200"
			   color="#ffffff">
		<mx:VBox id="vgroup2"
				 width="100%"
				 verticalGap="-2"
				 horizontalScrollPolicy="auto"
				 borderStyle="none"
				 borderColor="#000000"/>
	</mx:Canvas>
	<mx:Canvas borderStyle="none"
			   id="txaBulletins"
			   width="100%"
			   left="0"
			   height="167"
			   backgroundColor="#000000"
			   minHeight="200"
			   color="#ffffff">
		<mx:VBox id="vgroup"
				 width="100%"
				 verticalGap="-2"
				 horizontalScrollPolicy="auto"
				 borderStyle="none"
				 borderColor="#000000"/>
	</mx:Canvas>
	<mx:HBox id="marketWatchHGroup"
			 x="0"
			 y="165"
			 width="100%"
			 horizontalGap="0">
		<s:Image source="@Embed('../images/tardeactivityup.jpg')"
				 id="tradeActivity" useHandCursor="true" buttonMode="true"
				 click="messagesBar_clickHandler(event)"
				 />
		<s:Image source="@Embed('../images/newsup.jpg')"
				 id="messages"
				 buttonMode="true"
				 useHandCursor="true"
				 click="messagesBar_clickHandler(event)"
				 />
		<s:Image source="@Embed('../images/coporateannouceup.jpg')"
				 id="corporateAnnouncements"
				 buttonMode="true"
				 useHandCursor="true"
				 click="messagesBar_clickHandler(event)"
				 />
		<s:Image source="@Embed('../images/bulletinsupdown.jpg')"
				 id="bulletins"
				 buttonMode="true"
				 useHandCursor="true"
				 click="messagesBar_clickHandler(event)"
				 />
	</mx:HBox>
</s:BorderContainer>
