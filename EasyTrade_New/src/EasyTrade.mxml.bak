<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:flexlib="http://code.google.com/p/flexlib/"
			   xmlns:components="components.*"
			   xmlns:ticker="components.ticker.*"
			   width="100%"
			   height="100%"
			   skinClass="assets.skins.ETGradientBackgroundSkin"
			   initialize="application1_initializeHandler(event)"
			   creationComplete="addKeyboardListeners();"
			   xmlns:containers="com.dougmccune.containers.*">
	<!--Anas Changes-->
	<fx:Style> 
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace flexlib "http://code.google.com/p/flexlib/";
		@namespace components "components.*";
		@namespace ticker "components.ticker.*";
		mx|Alert {
			fontFamily: Verdana;
			creationCompleteEffect: alertCreationCompleteEffect;
			headerColors:#484848,#696969; 
			backgroundColor:#000000; 
			borderStyle:solid;
			headerHeight:20;
			cornerRadius:5;
		}
	</fx:Style>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"
						  formatString="YYYY/MM/DD ::: L:NN A"/>
		<!-- Anas Changes -->
		<mx:Parallel id="alertCreationCompleteEffect">
			<mx:Fade duration="500"/>
			<mx:Move yFrom="0"
					 easingFunction="Elastic.easeOut"
					 duration="1000"/>
		</mx:Parallel>
		<containers:VistaFlowContainer id="vistaFlow2"/>

		<!--Effects for the top level Application Bar-->
		<mx:Glow id="glowButton"
				 alphaFrom="1.0"
				 alphaTo="0.4"
				 blurXFrom="0.0"
				 blurXTo="70.0"
				 blurYFrom="0.0"
				 blurYTo="70.0"
				 color="#13B3AA"
				 duration="1000"/>
		<mx:Glow id="unglowButton"
				 alphaFrom="0.4"
				 alphaTo="1.0"
				 blurXFrom="70.0"
				 blurXTo="0.0"
				 blurYFrom="70.0"
				 blurYTo="0.0"
				 color="#13B3AA"
				 duration="1000"/>

		<s:Rotate3D id="rotator"
					angleYFrom="0"
					angleYTo="360"
					autoCenterTransform="true"
					effectEnd="effectEndHandler(event)"/>
		<s:Move3D id="mover"
				  duration="200"
				  zBy="-30"
				  repeatCount="2" 
				  repeatBehavior="{RepeatBehavior.REVERSE}"
				  autoCenterTransform="true"
				  effectEnd="effectEndHandler(event)"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.dougmccune.containers.VistaFlowContainer;
			import controller.EasyTradeApp;
			import controller.ModelManager;
			import controller.ProfileManager;
			import controller.ViewManager;
			import controller.WindowManager;
			import controller.windowControls.EasyTradeWindowControl;
			import spark.effects.animation.RepeatBehavior;
			import flash.filters.BitmapFilterQuality;
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			import mx.core.Container;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.effects.Effect;
			import mx.effects.easing.*;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			import spark.components.Button;
			import spark.filters.GlowFilter;

			include "eventhandlers/Menu.as";
			include "eventhandlers/Ticker.as";

			private var vistaFlow:VistaFlowContainer;

			private var buyButtonGlowFilter:spark.filters.GlowFilter;
			private var buyColor:Number=0xfc8c1d;

			private var sellButtonGlowFilter:spark.filters.GlowFilter;
			private var sellColor:Number=0x0ca2f8;

			private var cancelButtonGlowFilter:spark.filters.GlowFilter;
			private var cancelColor:Number=0xe72e14;

			private var eventLogButtonGlowFilter:spark.filters.GlowFilter;
			private var eventLogColor:Number=0x6dbc5e;

			private var executedOrdersButtonGlowFilter:spark.filters.GlowFilter;
			private var executedOrdersColor:Number=0xa7e1f3;

			private var workingOrdersButtonGlowFilter:spark.filters.GlowFilter;
			private var workingOrdersColor:Number=0x69bad4;
			private var animatingTargets:Object=new Object();


			[Bindable]
			[Embed(source="images/buyButton.png")]
			public var ImgBuy:Class;

			[Bindable]
			[Embed(source="images/sellButton.png")]
			public var ImgSell:Class;

			[Bindable]
			[Embed(source="images/cancelButton.png")]
			public var ImgCancel:Class;

			[Bindable]
			[Embed(source="images/workOrdersButton.png")]
			public var ImgWorkingOrders:Class;

			[Bindable]
			[Embed(source="images/executedOrdersButton.png")]
			public var ImgExecutedOrders:Class;

			[Bindable]
			[Embed(source="images/eventLogButton.png")]
			public var ImgEventLog:Class;

			[Bindable]
			[Embed(source="images/marketschedulecontrol.png")]
			public var ImgMarketScheduleControl:Class;

			[Bindable]
			[Embed(source="images/symbolstatecontrol.png")]
			public var ImgSymbolStateControl:Class;

			[Bindable]
			[Embed(source="images/historical_symbol.png")]
			public var ImgHistoricalSymbolChart:Class;

			[Bindable]
			[Embed(source="images/live_symbol.png")]
			public var ImgLiveSymbol:Class;

			[Bindable]
			[Embed(source="images/historical_index.png")]
			public var ImgHistoricalIndex:Class;

			[Bindable]
			[Embed(source="images/live_index.png")]
			public var ImgLiveIndex:Class;

//			private function assignParams():void{
//				
//				
//				
//			}

			private function animateHover(target:Object):void
			{
				if (animatingTargets[target.id] === undefined)
				{
					var effect:Effect;
					effect=rotator;
					effect.target=target;
					animatingTargets[target.id]=effect;
					effect.play();
				}
			}

			private function effectEndHandler(event:EffectEvent):void
			{
				delete animatingTargets[event.effectInstance.target.id];
			}

			private function application1_initializeHandler(event:FlexEvent):void
			{
				EasyTradeApp.getInstance().init(this);

				symbolTapeTicker.width=this.screen.width;
				newsTapeTicker.width=this.screen.width;
				startTicker(symbolTapeTicker, ModelManager.getInstance().symbolTickerFeedModel.feed);
				startTicker(newsTapeTicker, ModelManager.getInstance().newsTickerFeedModel.feed);

				var timer:Timer=new Timer(1000, 0);
				timer.addEventListener(TimerEvent.TIMER, handleQueueFillTimer);
				timer.start();

				this.addEventListener(Event.RESIZE, handleResize);
				this.addEventListener(MouseEvent.ROLL_OVER, handleRollOver, true);
				this.addEventListener(MouseEvent.ROLL_OUT, handleRollOut, true);
//				// added on 23/12/2010 
				this.systemManager.stage.addEventListener(KeyboardEvent.KEY_DOWN, app_keyDownHandler, true);
				// added on 24/12/2010
				if (ExternalInterface.available)
				{
					ExternalInterface.call("function() { document.title = '" + Constants.APPLICATION_TITLE + "'; }");
					ExternalInterface.call("function() { var link = document.createElement('link');" + "link.type = 'image/x-icon';" + "link.rel = 'shortcut icon';" + "link.href = 'favicon.ico';" + "document.getElementsByTagName('head')[0].appendChild(link);; }");
				}

				registerCallBacks();
			}

			protected function registerCallBacks():void
			{
				if (ExternalInterface.available)
				{
					ExternalInterface.addCallback("handleOrderConfirmation", handleOrderConfirmation);
					ExternalInterface.addCallback("updateBestMarketOrderFields", updateBestMarketOrderFields);
					ExternalInterface.addCallback("updateSymbolStatsOrderFields", updateSymbolStatsOrderFields);
					ExternalInterface.addCallback("handleMarketMessage", handleMarketMessage);
					ExternalInterface.addCallback("updateSymbolTradeHistory", updateSymbolTradeHistory);
				}
			}

			public function handleOrderConfirmation(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketWatch.handleOrderConfirmation(itemName, itemPos, updatedFields);
			}

			public function updateBestMarketOrderFields(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketWatch.updateBestMarketOrderFields(itemName, itemPos, updatedFields);
			}

			public function updateSymbolStatsOrderFields(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketWatch.updateSymbolStatsOrderFields(itemName, itemPos, updatedFields);
			}

			public function handleMarketMessage(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketSchedule.handleMarketMessage(itemName, itemPos, updatedFields);
			}

			public function updateSymbolTradeHistory(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.liveSymbolChart.updateSymbolTradeHistory(itemName, itemPos, updatedFields);
			}

			protected function imgBuy_clickHandler(event:MouseEvent):void
			{
				try
				{
					menuitemBuyOrder_itemClickHandler(null);
				}
				catch (e:Error)
				{
					trace('Exception Caught');
				}
			}

			protected function imgSell_clickHandler(event:MouseEvent):void
			{
				try
				{
					menuitemSellOrder_itemClickHandler(null);
				}
				catch (e:Error)
				{
					trace('Exception Caught');
				}
			}

			protected function imgCancel_clickHandler(event:MouseEvent):void
			{
				menuitemCancelOrder_itemClickHandler(null);
			}

			protected function imgWorkingOrders_clickHandler(event:MouseEvent):void
			{
				menuitemReminingOrders_itemClickHandler(null);
			}

			protected function imgExecutedOrders_clickHandler(event:MouseEvent):void
			{
				menuitemUserTradeHistory_itemClickHandler(null);
			}

			protected function imgEventLog_clickHandler(event:MouseEvent):void
			{
				menuitemEventLog_itemClickHandler(null);
			}

			protected function imgMarketScheduleControl_clickHandler(event:MouseEvent):void
			{
				menuitemMarketScheduleControl_itemClickHandler(null);
			}

			protected function imgSymbolStateControl_clickHandler(event:MouseEvent):void
			{
				menuitemSymbolStateControl_itemClickHandler(null);
			}

			protected function imgLiveSymbolChart_clickHandler(event:MouseEvent):void
			{
				menuitemLiveSymbolChart_itemClickHandler(null);
			}


			// added on 23/12/2010
			protected function app_keyDownHandler(event:KeyboardEvent):void
			{
				if (EasyTradeApp.getInstance().isUserLoggedin())
				{
					if (event.keyCode == 115)
					{
						imgBuy_clickHandler(null);
					}
					else if (event.keyCode == 116)
					{
						imgSell_clickHandler(null);
					}
				}
			}

			//This code is to make the windows float by using the cover Flow added by anas on 4/1/2012

			private function showVistaFlow():void
			{
				var windows:Array=canvas.windowManager.getOpenWindowList();
//				var n:int = windows.length();

				var maxWidth:Number=700;
				var maxHeight:Number=600;

				if (vistaFlow2)
				{
					vistaFlow2.removeAllChildren();
				}
				else
				{
					vistaFlow2=new VistaFlowContainer();
					vistaFlow2.reflectionEnabled=true;
					dispatchEvent(new Event(Event.CHANGE, true, false));
					vistaFlow2.addEventListener(Event.CHANGE, handleVistaChange);
				}
				var selectedIndex:int=0;


				for (var i:int=0; i < 100; i++)
				{
					var window:MDIWindow=windows[i];

					var bitmap:Bitmap;
					var ratio:Number;

					if (window.width > maxWidth || window.height > maxHeight)
					{
						if (window.width > window.height)
						{
							ratio=maxWidth / window.width;
						}
						else
						{
							ratio=maxHeight / window.height;
						}
					}
					else
					{
						ratio=1;
					}

					var container:Container=new Container();
					var uiComp:UIComponent=new UIComponent();

					if (window.hasFocus)
					{
						selectedIndex=i;
					}

					FlexGlobals.topLevelApplication.canvas.windowManager.bringToFront(window);
					window.validateNow();

					var matrix:Matrix=new Matrix();
					matrix.scale(ratio, ratio);

					var bmapData:BitmapData=new BitmapData(window.width * ratio, window.height * ratio, true, 0x00000000);
					bmapData.draw(window, matrix, null, null, null, true);

					bitmap=new Bitmap(bmapData, PixelSnapping.AUTO, true);

					uiComp.addChild(bitmap);
					container.addChild(uiComp);

					container.width=uiComp.width=window.width * ratio;
					container.height=uiComp.height=window.height * ratio;

					vistaFlow2.addChild(container);
				}

				vistaFlow2.selectedIndex=selectedIndex;

				vistaFlow2.width=this.width;
				vistaFlow2.height=this.height;
				PopUpManager.addPopUp(vistaFlow2, this, true);
			}

			private function removeVistaFlow():void
			{
				var selectedIndex:int=vistaFlow2.selectedIndex;
				canvas.windowManager.bringToFront(FlexGlobals.topLevelApplication.canvas.windowManager.getOpenWindowList()[selectedIndex]);
				vistaFlow2.removeAllChildren();
				PopUpManager.removePopUp(vistaFlow2);
			}

			private function addKeyboardListeners():void
			{
				Constants.SERVICE_URL=FlexGlobals.topLevelApplication.parameters.SERVICE_URL;
				Constants.SECURE_SERVICE_URL=FlexGlobals.topLevelApplication.parameters.SECURE_SERVICE_URL;
				Constants.LIGHTSTREAMER_SERVER=FlexGlobals.topLevelApplication.parameters.LIGHTSTREAMER_SERVER;
				Constants.LIGHTSTREAMER_PORT=FlexGlobals.topLevelApplication.parameters.LIGHTSTREAMER_PORT;
				Constants.QW_WSDL_END_POINT=Constants.SERVICE_URL + Constants.QW_WSDL_END_POINT;
				Constants.ORDERER_WSDL_END_POINT=Constants.SERVICE_URL + Constants.ORDERER_WSDL_END_POINT;
				Constants.ANNOUNCER_WSDL_END_POINT=Constants.SERVICE_URL + Constants.ANNOUNCER_WSDL_END_POINT;
				Constants.LOGIN_MANAGER_WSDL_END_POINT=Constants.SERVICE_URL + Constants.LOGIN_MANAGER_WSDL_END_POINT;

				this.addEventListener(KeyboardEvent.KEY_DOWN, vistaKeyDownHandler);
				this.addEventListener(KeyboardEvent.KEY_UP, vistaKeyUpHandler);
			}

			private function handleVistaChange(event:KeyboardEvent):void
			{
				var index:int=vistaFlow2.selectedIndex;
				FlexGlobals.topLevelApplication.canvas.windowManager.bringToFront(canvas.windowManager.getOpenWindowList()[index]);
			}

			private function vistaKeyDownHandler(event:KeyboardEvent):void
			{
				try
				{
					if (event.ctrlKey == true && event.keyCode == 78 && event.altKey == true)
					{
						if (vistaFlow2 && vistaFlow2.isPopUp)
						{
							if (vistaFlow2.selectedIndex < vistaFlow2.numChildren - 1)
							{
								vistaFlow2.selectedIndex++;
							}
							else
							{
								vistaFlow2.selectedIndex=0;
							}
						}
						else
						{
							showVistaFlow();
						}
					}
				}
				catch (e:Error)
				{
					trace('Catchay');
				}

			}

			private function vistaKeyUpHandler(event:KeyboardEvent):void
			{
				if (vistaFlow2 && vistaFlow2.isPopUp && event.keyCode == Keyboard.SHIFT)
				{
					removeVistaFlow();
				}
			}
		]]>
	</fx:Script>

	<fx:Style source="EasyTrade.css"/>
	<mx:Canvas left="0"
			   top="1"
			   width="100%"
			   backgroundColor="#000000"
			   height="27"
			   id="headerCanvas">
		<s:Image left="-38"
				 top="0"
				 width="100%"
				 source="@Embed('assets/Header-main.jpg')"/>
	</mx:Canvas>
	<mx:Canvas id="canvasHeader"
			   left="0"
			   top="27"
			   width="100%"
			   height="46">
		<mx:MenuBar id="menubarMain"
					labelField="@label"
					iconField="@icon"
					height="21"
					itemClick="menubarMain_itemClickHandler(event)"
					x="0"
					y="0"
					width="100%">
			<fx:XMLList>
				<menuitem label="File">
					<!--menuitem label="Fonts" />
					<menuitem label="Unattended Mode" />
					<menuitem label="Change Password" />
					<menuitem type="separator"/>
					<menuitem label="Messages" >
					<menuitem label="Send Message" />
					<menuitem label="Save Messages" />
					</menuitem>
					<menuitem label="Printing" >
					<menuitem label="Print Messages" submenu_id="PrintMessages" />
					<menuitem label="Print History Messages" submenu_id="PrintHistoryMessages" />
					<menuitem label="Change Printer" submenu_id="ChangePrinter" />
					</menuitem>
					<menuitem type="separator"/>
					<menuitem label="Speak Messages" />
					<menuitem label="Speach Settings" />
					<menuitem type="separator"/-->
					<menuitem label="Log off"/>
					<!-- menuitem label="Exit" / -->
				</menuitem>
				<menuitem label="Order"
						  id="menuitemOrder">
					<menuitem label="Sell"
							  icon="ImgBuy"/>
					<menuitem label="Buy"
							  icon="ImgSell"/>
					<menuitem label="Change"/>
					<menuitem label="Cancel"
							  icon="ImgCancel"/>
					<menuitem label="Yield Calculator"/>
					<menuitem label="Quick Orders"/>
					<!--menuitem label="Take" />
					<menuitem label="Hit" />
					<menuitem type="separator"/>
					<menuitem label="Cross Trade" />
					<menuitem type="separator"/-->
				</menuitem>
				<menuitem label="Watch"
						  id="menuitemWatch">
					<menuitem label="Market"/>
					<menuitem label="Best Orders"/>
					<menuitem label="Best Price Levels"/>
					<menuitem label="Messages"/>
					<!--menuitem label="Water Fall Ticker" /-->
					<menuitem type="separator"/>
					<menuitem label="Exchange Stats"/>
					<menuitem label="Market Schedule"/>
				</menuitem>
				<menuitem label="Reports"
						  id="menuitemReports">
					<menuitem label="Working Orders"
							  icon="ImgWorkingOrders"/>
					<!--menuitem label="Order Book" /-->
					<menuitem label="Executed Orders"
							  icon="ImgExecutedOrders"/>
					<menuitem label="Event Log"
							  icon="ImgEventLog"/>
					<menuitem type="separator"/>
					<menuitem label="Symbol Browser"/>
					<menuitem label="Symbol Summary"/>
					<menuitem label="Market Summary"/>
					<!--menuitem label="Symbol Summary" />

					<menuitem type="separator"/>
					<menuitem label="Net Position" /-->
				</menuitem>
				<menuitem label="Control"
						  enabled="false">
					<menuitem label="Market States"
							  icon="ImgMarketScheduleControl"/>
					<!--menuitem type="separator"/-->
					<menuitem label="Symbol State"
							  icon="ImgSymbolStateControl"/>
					<!--menuitem label="Symbol Spot Status" />
					<menuitem label="Symbol Freeze Selection" />
					<menuitem label="Symbol Order Cancelation" />
					<menuitem type="separator"/>
					<menuitem label="User State" />
					<menuitem type="separator"/>
					<menuitem label="Operational Bulletin" /-->
					<menuitem label="Bulletin"/>
					<!--menuitem type="separator"/>
					<menuitem label="Remove Timing Schedule" />
					<menuitem type="separator"/>
					<menuitem label="Change Freeze Limits" /-->
					<menuitem label="Change Order Limits"/>
					<!--menuitem type="separator"/>
					<menuitem label="Future Session" /-->
					<menuitem label="Last Day Remaining Orders"
							  enabled="false"/>
					<menuitem label="Cancel All Orders"/>
				</menuitem>
				<menuitem label="Bond">
					<menuitem label="Payment Schedule"
							  enabled="false"/>
					<menuitem label="Summary"
							  enabled="false"/>
					<menuitem label="Historical Data"
							  enabled="false"/>
				</menuitem>
				<menuitem label="Settings">
					<menuitem label="Profile"/>
					<menuitem label="Change Password"/>
					<menuitem label="Printer"
							  enabled="false"/>
				</menuitem>
				<menuitem label="Charts">
					<menuitem label="Real Time">
						<menuitem label="Index"
								  enabled="false"
								  icon="ImgLiveIndex"/>
						<menuitem label="Symbol"
								  id="liveSym"
								  icon="ImgLiveSymbol"/>
					</menuitem>
					<menuitem label="Historical">
						<menuitem label="Index"
								  enabled="false"
								  icon="ImgHistoricalIndex"/>
						<menuitem label="Symbol"
								  enabled="false"
								  id="historicalSym"
								  icon="ImgHistoricalSymbolChart"/>
						<menuitem label="Volume Leaders"
								  enabled="false"/>
					</menuitem>
				</menuitem>
				<menuitem label="Help">
					<menuitem label="About Easy Trade"
							  id="about"/>
				</menuitem>
			</fx:XMLList>
		</mx:MenuBar>
		<!--<mx:ToolBar x="0" y="20" width="100%" paddingBottom="0" paddingTop="0" verticalScrollPolicy="off">-->
		<mx:ApplicationControlBar id="toolbarMain"
								  top="20"
								  width="100%"
								  height="25"
								  horizontalCenter="0"
								  paddingBottom="5"
								  paddingTop="0"
								  verticalScrollPolicy="off"
								  horizontalGap="0"
								  verticalGap="0">
			<mx:Spacer width="5">
			</mx:Spacer>
		</mx:ApplicationControlBar>
		<!--</mx:ToolBar>-->
		<components:buttonBuy left="25"
							  top="27"
							  buttonMode="true"
							  click="imgSell_clickHandler(event)"
							  toolTip="Sell"
							  rollOverEffect="{glowButton}"
							  id="buyButton"
							  rollOutEffect="{unglowButton}"
							  mouseOver="animateHover(buyButton)"
							  useHandCursor="true"/>
		<components:buttonSell id="imgSell"
							   left="51"
							   top="27"
							   buttonMode="true"
							   click="imgBuy_clickHandler(event)"
							   rollOverEffect="{glowButton}"
							   rollOutEffect="{unglowButton}"
							   mouseOver="animateHover(imgSell)"
							   toolTip="Buy"
							   useHandCursor="true"/>

		<components:cancelButton id="imgCancel"
								 left="77"
								 top="27"
								 buttonMode="true"
								 mouseOver="animateHover(imgCancel)"
								 click="imgCancel_clickHandler(event)"
								 useHandCursor="true"
								 rollOverEffect="{glowButton}"
								 rollOutEffect="{unglowButton}"
								 toolTip="Cancel"/>
		<components:buttonWorkingOrders id="imgWorkingOrders"
										left="105"
										top="27"
										buttonMode="true"
										mouseOver="animateHover(imgWorkingOrders)"
										click="imgWorkingOrders_clickHandler(event)"
										useHandCursor="true"
										rollOverEffect="{glowButton}"
										rollOutEffect="{unglowButton}"
										toolTip="Working Orders"/>
		<components:buttonExecutedOrders id="imgExecutedOrders"
										 left="135"
										 top="28"
										 buttonMode="true"
										 mouseOver="animateHover(imgExecutedOrders)"
										 click="imgExecutedOrders_clickHandler(event)"
										 useHandCursor="true"
										 rollOverEffect="{glowButton}"
										 rollOutEffect="{unglowButton}"
										 toolTip="Executed Orders"/>
		<components:buttonEventLog id="imgEventLog"
								   left="162"
								   top="27"
								   buttonMode="true"
								   click="imgEventLog_clickHandler(event)"
								   mouseOver="animateHover(imgEventLog)"
								   rollOverEffect="{glowButton}"
								   rollOutEffect="{unglowButton}"
								   toolTip="Event Log"/>
		<components:buttonMarketSchdeuleControl id="imgMarketScheduleControl"
												left="192"
												top="27"
												mouseOver="animateHover(imgMarketScheduleControl)"
												buttonMode="{ModelManager.getInstance().userProfileModel.isAdminUser}"
												click="imgSymbolStateControl_clickHandler(event)"
												enabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
												mouseEnabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
												rollOverEffect="{glowButton}"
												rollOutEffect="{unglowButton}"
												toolTip="Market State Control"/>
		<components:Indexes id="imgHistoricalSymbolChart"
							left="222"
							top="27"
							rollOverEffect="{glowButton}"
							rollOutEffect="{unglowButton}"
							buttonMode="{ModelManager.getInstance().userProfileModel.isAdminUser}"
							click="imgSymbolStateControl_clickHandler(event)"
							mouseOver="animateHover(imgHistoricalSymbolChart)"
							enabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
							mouseEnabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
							toolTip="Change Symbol State"/>
		<components:liveCharts id="imgLiveSymbol"
							   left="254"
							   top="27"
							   mouseOver="animateHover(imgLiveSymbol)"
							   rollOverEffect="{glowButton}"
							   rollOutEffect="{unglowButton}"
							   buttonMode="true"
							   enabled="false"
							   mouseEnabled="true"
							   toolTip="Live Symbol Chart"/>
		<components:realTimeIndexCharts id="imgLiveIndex"
										left="285"
										top="27"
										enabled="false"
										mouseOver="animateHover(imgLiveIndex)"
										rollOverEffect="{glowButton}"
										rollOutEffect="{unglowButton}"
										mouseEnabled="true"
										toolTip="Live Index Chart"/>
		<mx:Label left="737"
				  top="24"
				  styleName="welcomeString"
				  text=" Logged In User: {ProfileManager.getInstance().userName}               Logged In Date/Time: {dateFormatter.format(new Date())} "
				  fontSize="11"/>
	</mx:Canvas>

	<flexlib:MDICanvas id="canvas"
					   x="0"
					   width="100%"
					   top="73"
					   bottom="41"
					   effectsLib="{MDIVistaEffects}"
					   horizontalScrollPolicy="off"
					   verticalScrollPolicy="off">
	</flexlib:MDICanvas>
	<s:BorderContainer left="0"
					   right="0"
					   bottom="21"
					   height="20"
					   x="0"
					   width="100%"
					   styleName="bgNewsTapeTicker"
					   borderVisible="false"/>
	<ticker:Ticker id="newsTapeTicker"
				   left="0"
				   right="0"
				   bottom="25"
				   height="20"
				   x="0"
				   width="100%"
				   tickerType="{TickerType.TAPE_TICKER_NEWS}"
				   ITEM_WIDTH="300"
				   ITEM_HEIGHT="20"/>
	<s:BorderContainer left="0"
					   right="0"
					   bottom="1"
					   height="20"
					   x="0"
					   width="100%"
					   styleName="bgSymbolTapeTicker"
					   borderVisible="true"/>
	<ticker:Ticker id="symbolTapeTicker"
				   left="0"
				   right="0"
				   bottom="5"
				   height="20"
				   x="0"
				   width="100%"
				   tickerType="{TickerType.TAPE_TICKER_SYMBOL}"
				   ITEM_WIDTH="210"
				   ITEM_HEIGHT="20"/>
</s:Application>

<!--top="73" bottom="41" top="{headerCanvas.height}" bottom="{newsTapeTicker.height + symbolTapeTicker.height}"-->
