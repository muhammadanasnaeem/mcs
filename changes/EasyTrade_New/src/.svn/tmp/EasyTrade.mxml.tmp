<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:flexlib="http://code.google.com/p/flexlib/"
			   xmlns:components="components.*" xmlns:ticker="components.ticker.*"
			   width="100%" height="100%" skinClass="assets.skins.ETGradientBackgroundSkin"
			   initialize="application1_initializeHandler(event)" creationComplete="addKeyboardListeners();">
	<!--Anas Changes--><fx:Style> 
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace flexlib "http://code.google.com/p/flexlib/";
		@namespace components "components.*";
		@namespace ticker "components.ticker.*";
		
		mx|Alert {
			fontFamily: Verdana;
			creationCompleteEffect: alertCreationCompleteEffect;
			headerColors:#484848,#696969; 
			backgroundColor:#000000; 
			borderStyle:solid;
			headerHeight:20;
			cornerRadius:5;
		}
		
	</fx:Style>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter" formatString="YYYY/MM/DD ::: L:NN A" /> 
		<mx:Parallel id="alertCreationCompleteEffect"><!-- Anas Changes -->   
			<mx:Fade duration="500" />
			<mx:Move yFrom="0"
					 easingFunction="Elastic.easeOut"
					 duration="1000" />
		</mx:Parallel>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.dougmccune.containers.VistaFlowContainer;
			
			import controller.EasyTradeApp;
			import controller.ModelManager;
			import controller.ProfileManager;
			import controller.ViewManager;
			import controller.WindowManager;
			import controller.windowControls.EasyTradeWindowControl;
			
			import flash.filters.BitmapFilterQuality;
			
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			
			import mx.core.Container;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.effects.easing.*;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Button;
			import spark.filters.GlowFilter;
			
			include "eventhandlers/Menu.as";
			include "eventhandlers/Ticker.as";
			
			private var vistaFlow:VistaFlowContainer;
			
			private var buyButtonGlowFilter:spark.filters.GlowFilter;  
			private var buyColor:Number = 0xfc8c1d;
			
			private var sellButtonGlowFilter:spark.filters.GlowFilter;  
			private var sellColor:Number = 0x0ca2f8;
			
			private var cancelButtonGlowFilter:spark.filters.GlowFilter;  
			private var cancelColor:Number = 0xe72e14;
			
			private var eventLogButtonGlowFilter:spark.filters.GlowFilter;  
			private var eventLogColor:Number = 0x6dbc5e;
			
			private var executedOrdersButtonGlowFilter:spark.filters.GlowFilter;  
			private var executedOrdersColor:Number = 0xa7e1f3;
			
			private var workingOrdersButtonGlowFilter:spark.filters.GlowFilter;  
			private var workingOrdersColor:Number = 0x69bad4;
			
			
			
			[Bindable] 
			[Embed(source="images/buyButton.png")]
			public var ImgBuy:Class;
			
			[Bindable]
			[Embed(source="images/sellButton.png")]
			public var ImgSell:Class;
			
			[Bindable]
			[Embed(source="images/cancelButton.png")]
			public var ImgCancel:Class;
			
			[Bindable]
			[Embed(source="images/workOrdersButton.png")]
			public var ImgWorkingOrders:Class;
			
			[Bindable]
			[Embed(source="images/executedOrdersButton.png")]
			public var ImgExecutedOrders:Class;
			
			[Bindable]
			[Embed(source="images/eventLogButton.png")]
			public var ImgEventLog:Class;
			
			[Bindable]
			[Embed(source="images/marketschedulecontrol.png")]
			public var ImgMarketScheduleControl:Class;
			
			[Bindable]
			[Embed(source="images/symbolstatecontrol.png")]
			public var ImgSymbolStateControl:Class;
			
			[Bindable]
			[Embed(source="images/historical_symbol.png")]
			public var ImgHistoricalSymbolChart:Class;
			
			[Bindable]
			[Embed(source="images/live_symbol.png")]
			public var ImgLiveSymbol:Class;
			
			[Bindable]
			[Embed(source="images/historical_index.png")]
			public var ImgHistoricalIndex:Class;
			
			[Bindable]
			[Embed(source="images/live_index.png")]
			public var ImgLiveIndex:Class;
			
//			private function assignParams():void{
//				
//				
//				
//			}
			private function application1_initializeHandler(event:FlexEvent):void
			{
				EasyTradeApp.getInstance().init(this);
				
				symbolTapeTicker.width = this.screen.width;
				newsTapeTicker.width = this.screen.width;
				startTicker(symbolTapeTicker, ModelManager.getInstance().symbolTickerFeedModel.feed);
				startTicker(newsTapeTicker, ModelManager.getInstance().newsTickerFeedModel.feed);
				
				var timer:Timer = new Timer(1000, 0);
				timer.addEventListener(TimerEvent.TIMER, handleQueueFillTimer);
				timer.start();
				
				this.addEventListener(Event.RESIZE, handleResize); 
				this.addEventListener(MouseEvent.ROLL_OVER, handleRollOver, true);
				this.addEventListener(MouseEvent.ROLL_OUT, handleRollOut, true);
//				// added on 23/12/2010 
				this.systemManager.stage.addEventListener(KeyboardEvent.KEY_DOWN, app_keyDownHandler,true);
				// added on 24/12/2010
				if (ExternalInterface.available)
				{
					ExternalInterface.call("function() { document.title = '"+Constants.APPLICATION_TITLE+"'; }");
					ExternalInterface.call("function() { var link = document.createElement('link');"
    					+"link.type = 'image/x-icon';" 
					    +"link.rel = 'shortcut icon';"
					    +"link.href = 'favicon.ico';"
					    +"document.getElementsByTagName('head')[0].appendChild(link);; }");
				}
				
				registerCallBacks();
			}
			
			protected function registerCallBacks():void
			{
				if (ExternalInterface.available)
				{
					ExternalInterface.addCallback("handleOrderConfirmation", handleOrderConfirmation);
					ExternalInterface.addCallback("updateBestMarketOrderFields", updateBestMarketOrderFields);
					ExternalInterface.addCallback("updateSymbolStatsOrderFields", updateSymbolStatsOrderFields);
					ExternalInterface.addCallback("handleMarketMessage", handleMarketMessage);
					ExternalInterface.addCallback("updateSymbolTradeHistory", updateSymbolTradeHistory);
				}
			}
			
			public function handleOrderConfirmation(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketWatch.handleOrderConfirmation(itemName, itemPos, updatedFields);
			}
			
			public function updateBestMarketOrderFields(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketWatch.updateBestMarketOrderFields(itemName, itemPos, updatedFields);
			}
			  
			public function updateSymbolStatsOrderFields(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketWatch.updateSymbolStatsOrderFields(itemName, itemPos, updatedFields);
			}
			
			public function handleMarketMessage(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.marketSchedule.handleMarketMessage(itemName, itemPos, updatedFields); 
			}
			
			public function updateSymbolTradeHistory(itemName:String, itemPos:Number, updatedFields:Array):void
			{
				WindowManager.getInstance().viewManager.liveSymbolChart.updateSymbolTradeHistory(itemName, itemPos, updatedFields);
			}
			
			protected function imgBuy_clickHandler(event:MouseEvent):void
			{
				try
				{
					menuitemBuyOrder_itemClickHandler(null);
				}
				catch(e:Error)
				{
					trace('Exception Caught');
				}
			}

			protected function imgSell_clickHandler(event:MouseEvent):void
			{
				try
				{
					menuitemSellOrder_itemClickHandler(null);
				}
				catch(e:Error)
				{
					trace('Exception Caught');
				}
			}

			protected function imgCancel_clickHandler(event:MouseEvent):void
			{
				menuitemCancelOrder_itemClickHandler(null);
			}

			protected function imgWorkingOrders_clickHandler(event:MouseEvent):void
			{
				menuitemReminingOrders_itemClickHandler(null);
			}

			protected function imgExecutedOrders_clickHandler(event:MouseEvent):void
			{
				menuitemUserTradeHistory_itemClickHandler(null);
			}

			protected function imgEventLog_clickHandler(event:MouseEvent):void
			{
				menuitemEventLog_itemClickHandler(null);
			}

			protected function imgMarketScheduleControl_clickHandler(event:MouseEvent):void
			{
				menuitemMarketScheduleControl_itemClickHandler(null);
			}

			protected function imgSymbolStateControl_clickHandler(event:MouseEvent):void
			{
				menuitemSymbolStateControl_itemClickHandler(null);
			}
			
			protected function imgLiveSymbolChart_clickHandler(event:MouseEvent):void
			{
				menuitemLiveSymbolChart_itemClickHandler(null);
			}
			
			// Filters applied for the buttons on the main toolbar. added by anas 4/1/2012
			protected function buyImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
				var buyImg:spark.components.Button = event.currentTarget as spark.components.Button;
				buyButtonGlowFilter = new GlowFilter(buyColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
					false, false);
				buyImg.filters = [buyButtonGlowFilter];
				}
				catch(e:Error)
				{
				
				}
			}
			
			
			protected function buyImgMouseOutHandler(event:MouseEvent):void
			{
				try{
				var buyImg:spark.components.Button = event.currentTarget as spark.components.Button;
				buyImg.filters = null;
				}
				catch(e:Error)
				{
				
				}
			}
			
			protected function sellImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
				var sellImg:spark.components.Image = event.currentTarget as spark.components.Image;
				buyButtonGlowFilter = new GlowFilter(sellColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
					false, false);
				sellImg.filters = [sellButtonGlowFilter];
				}
				catch(e:Error)
				{
				
				}
			}
			
			
			protected function sellImgMouseOutHandler(event:MouseEvent):void
			{
				try
				{
				var sellImg:spark.components.Image = event.currentTarget as spark.components.Image;
				sellImg.filters = null;
				}
				catch(e:Error)
				{
				
				}
			}
			
			protected function cancelImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
				var cancelImg:spark.components.Image = event.currentTarget as spark.components.Image;
				cancelButtonGlowFilter = new GlowFilter(cancelColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
					false, false);
				cancelImg.filters = [buyButtonGlowFilter];
				}
				catch(e:Error)
				{
				
				}
			}
			
			
			protected function cancelImgMouseOutHandler(event:MouseEvent):void
			{
				try
				{
				var cancelImg:spark.components.Image = event.currentTarget as spark.components.Image;
				cancelImg.filters = null;
				}catch(e:Error)
				{
				
				}
			}
			
			protected function workingOrdersImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
				var workingOrdersImg:spark.components.Image = event.currentTarget as spark.components.Image;
				workingOrdersButtonGlowFilter = new GlowFilter(workingOrdersColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
					false, false);
				workingOrdersImg.filters = [buyButtonGlowFilter];
				}catch(e:Error)
				{
				
				}
			}
			
			
			protected function workingOrdersImgMouseOutHandler(event:MouseEvent):void
			{
				try
				{
				var workingOrdersImg:spark.components.Image = event.currentTarget as spark.components.Image;
				workingOrdersImg.filters = null;
				}catch(e:Error)
				{
				
				}
			}
			
			protected function executedOrdersImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
				var executedOrdersImg:spark.components.Image = event.currentTarget as spark.components.Image;
				executedOrdersButtonGlowFilter = new GlowFilter(executedOrdersColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
					false, false);
				executedOrdersImg.filters = [buyButtonGlowFilter];
				}catch(e:Error)
				{
				
				}
			}
			
			
			protected function executedOrdersImgMouseOutHandler(event:MouseEvent):void
			{
				try
				{
				var executedOrdersImg:spark.components.Image = event.currentTarget as spark.components.Image;
				executedOrdersImg.filters = null;
				}catch(e:Error)
				{
				
				}
			}
			
			protected function eventLogImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
				var eventLogImg:spark.components.Image = event.currentTarget as spark.components.Image;
				eventLogButtonGlowFilter = new GlowFilter(eventLogColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
					false, false);
				eventLogImg.filters = [buyButtonGlowFilter];
				}catch(e:Error)
				{
				
				}
			}
			
			
			protected function eventLogImgMouseOutHandler(event:MouseEvent):void
			{
				try
				{
				var eventLogImg:spark.components.Image = event.currentTarget as spark.components.Image;
				eventLogImg.filters = null;
				}catch(e:Error)
				{
				
				}
			}
			
			protected function marketScheduleControlImgMouseOverHandler(event:MouseEvent):void
			{
				try
				{
					var eventLogImg:spark.components.Image = event.currentTarget as spark.components.Image;
					eventLogButtonGlowFilter = new GlowFilter(eventLogColor, .8, 6, 6, .65, BitmapFilterQuality.MEDIUM, 
						false, false);
					eventLogImg.filters = [buyButtonGlowFilter];
				}catch(e:Error)
				{
					
				}
			}
			
			
			protected function marketScheduleControlImgMouseOutHandler(event:MouseEvent):void
			{
				try
				{
					var eventLogImg:spark.components.Image = event.currentTarget as spark.components.Image;
					eventLogImg.filters = null;
				}catch(e:Error)
				{
					
				}
			}
			// added on 23/12/2010
			protected function app_keyDownHandler(event:KeyboardEvent):void
			{
				if(EasyTradeApp.getInstance().isUserLoggedin()){
					if(event.keyCode == 115)
					{
						imgBuy_clickHandler(null);
					}
					else if(event.keyCode == 116)
					{
						imgSell_clickHandler(null);
					}
				}
			}
			
			//This code is to make the windows float by using the cover Flow added by anas on 4/1/2012
			
			private function showVistaFlow():void {
				var windows:Array = FlexGlobals.topLevelApplication.canvas.windowManager.getOpenWindowList();
//				var n:int = windows.length();
				
				var maxWidth:Number = 700;
				var maxHeight:Number = 600;
				
				if(vistaFlow) {
					vistaFlow.removeAllChildren();
				}
				else {
					vistaFlow = new VistaFlowContainer();
					vistaFlow.reflectionEnabled = true;
					vistaFlow.addEventListener(Event.CHANGE, handleVistaChange);
				}
				
				var selectedIndex:int=0;
				
				
				for(var i:int=0; i<100; i++) {
					var window:MDIWindow = windows[i];
					
					var bitmap:Bitmap;
					var ratio:Number;
					
					if(window.width > maxWidth || window.height > maxHeight) {
						if(window.width > window.height) {
							ratio = maxWidth/window.width;
						}
						else {
							ratio = maxHeight/window.height;
						}
					}
					else {
						ratio = 1;
					}
					
					var container:Container = new Container();
					var uiComp:UIComponent = new UIComponent();
					
					if(window.hasFocus) {
						selectedIndex = i;
					}
					
					FlexGlobals.topLevelApplication.canvas.windowManager.bringToFront(window);
					window.validateNow();
					
					var matrix:Matrix = new Matrix();
					matrix.scale(ratio, ratio);
					
					var bmapData:BitmapData = new BitmapData(window.width*ratio, window.height*ratio, true, 0x00000000);
					bmapData.draw(window, matrix, null, null, null, true);
					
					bitmap = new Bitmap(bmapData, PixelSnapping.AUTO, true);	
					
					uiComp.addChild(bitmap);
					container.addChild(uiComp);
					
					container.width = uiComp.width= window.width*ratio;
					container.height = uiComp.height = window.height*ratio;
					
					vistaFlow.addChild(container);
				}
				
				vistaFlow.selectedIndex = selectedIndex;
				
				vistaFlow.width = this.width;
				vistaFlow.height = this.height;
				PopUpManager.addPopUp(vistaFlow, this, true);
			}
			
			private function removeVistaFlow():void {
				
				var selectedIndex:int = vistaFlow.selectedIndex;
				
				canvas.windowManager.bringToFront(FlexGlobals.topLevelApplication.canvas.windowManager.getOpenWindowList()[selectedIndex]);
			
				vistaFlow.removeAllChildren();
				PopUpManager.removePopUp(vistaFlow);
			}
			
			private function addKeyboardListeners():void {
//				Alert.show('');
				Constants.SERVICE_URL = FlexGlobals.topLevelApplication.parameters.SERVICE_URL;
				Constants.SECURE_SERVICE_URL = FlexGlobals.topLevelApplication.parameters.SECURE_SERVICE_URL;
				Constants.LIGHTSTREAMER_SERVER = FlexGlobals.topLevelApplication.parameters.LIGHTSTREAMER_SERVER;
				Constants.LIGHTSTREAMER_PORT = FlexGlobals.topLevelApplication.parameters.LIGHTSTREAMER_PORT;
				
				Constants.QW_WSDL_END_POINT = Constants.SERVICE_URL + Constants.QW_WSDL_END_POINT;
				Constants.ORDERER_WSDL_END_POINT = Constants.SERVICE_URL + Constants.ORDERER_WSDL_END_POINT;
				Constants.ANNOUNCER_WSDL_END_POINT = Constants.SERVICE_URL + Constants.ANNOUNCER_WSDL_END_POINT;
				Constants.LOGIN_MANAGER_WSDL_END_POINT = Constants.SERVICE_URL + Constants.LOGIN_MANAGER_WSDL_END_POINT;
				
//				this.addEventListener(KeyboardEvent.KEY_DOWN, vistaKeyDownHandler);
//				this.addEventListener(KeyboardEvent.KEY_UP, vistaKeyUpHandler);
			}
			
			private function handleVistaChange(event:KeyboardEvent):void {
				var index:int = vistaFlow.selectedIndex;
				FlexGlobals.topLevelApplication.canvas.windowManager.bringToFront(canvas.windowManager.getOpenWindowList()[index]);
			}
			
			private function vistaKeyDownHandler(event:KeyboardEvent):void {
//				Alert.show(''); 
				try{ 
					if(event == true && event.keyCode == 13) {
						if(vistaFlow && vistaFlow.isPopUp) {
							if(vistaFlow.selectedIndex < vistaFlow.numChildren - 1) {
								vistaFlow.selectedIndex++;
							}
							else {
								vistaFlow.selectedIndex = 0;
							}
						}
						else {
							showVistaFlow();
						}
					}
				}catch(e:Error)
				{
					trace('Catchay');
				}
					
			}
			
			private function vistaKeyUpHandler(event:KeyboardEvent):void {
				if(vistaFlow && vistaFlow.isPopUp && event.keyCode == Keyboard.SHIFT) {
					removeVistaFlow();	
				}
			}
		]]>
	</fx:Script>
	
	<fx:Style source="EasyTrade.css" />
	<mx:Canvas left="0" top="1" width="100%" backgroundColor="#000000" height="27" id="headerCanvas">
		<s:Image left="-38" top="0" width="100%" source="@Embed('assets/Header-main.jpg')"/>
	</mx:Canvas>
	<mx:Canvas id="canvasHeader" left="0" top="27" width="100%"  height="46">
			<mx:MenuBar id="menubarMain" 
						labelField="@label" 
						iconField="@icon" height="21"
						itemClick="menubarMain_itemClickHandler(event)" 
						x="0" y="0" width="100%">
				<fx:XMLList>
					<menuitem label="File" >
						<!--menuitem label="Fonts" />
						<menuitem label="Unattended Mode" />
						<menuitem label="Change Password" />
						<menuitem type="separator"/>
						<menuitem label="Messages" >
						<menuitem label="Send Message" />
						<menuitem label="Save Messages" />
						</menuitem>
						<menuitem label="Printing" >
						<menuitem label="Print Messages" submenu_id="PrintMessages" />
						<menuitem label="Print History Messages" submenu_id="PrintHistoryMessages" />
						<menuitem label="Change Printer" submenu_id="ChangePrinter" />
						</menuitem>
						<menuitem type="separator"/>
						<menuitem label="Speak Messages" />
						<menuitem label="Speach Settings" />
						<menuitem type="separator"/-->
						<menuitem label="Log off" />
						<!-- menuitem label="Exit" / -->
					</menuitem>
					<menuitem label="Order" id="menuitemOrder" >
						<menuitem label="Buy" icon="ImgBuy" />															
						<menuitem label="Sell" icon="ImgSell" />
						<menuitem label="Change" />
						<menuitem label="Cancel" icon="ImgCancel" />
						<menuitem label="Yield Calculator" />
						<menuitem label="Quick Orders" />
						<!--menuitem label="Take" />
						<menuitem label="Hit" />
						<menuitem type="separator"/>
						<menuitem label="Cross Trade" />
						<menuitem type="separator"/-->
					</menuitem>
					<menuitem label="Watch" id="menuitemWatch" >
						<menuitem label="Market" />
						<menuitem label="Best Orders" />
						<menuitem label="Best Price Levels" />
						<menuitem label="Messages" />
						<!--menuitem label="Water Fall Ticker" /-->
						<menuitem type="separator"/>
						<menuitem label="Exchange Stats" />
						<menuitem label="Market Schedule" />
					</menuitem>
					<menuitem label="Reports" id="menuitemReports" >
						<menuitem label="Working Orders" icon="ImgWorkingOrders" />						
						<!--menuitem label="Order Book" /-->
						<menuitem label="Executed Orders" icon="ImgExecutedOrders" />
						<menuitem label="Event Log" icon="ImgEventLog" />
						<menuitem type="separator"/>
						<menuitem label="Symbol Browser" />
						<menuitem label="Symbol Summary" /> 
						<menuitem label="Market Summary" />
						<!--menuitem label="Symbol Summary" />
						
						<menuitem type="separator"/>
						<menuitem label="Net Position" /-->
					</menuitem>
					<menuitem label="Control" enabled="false" >
						<menuitem label="Market States" icon="ImgMarketScheduleControl" />
						<!--menuitem type="separator"/-->
						<menuitem label="Symbol State" icon="ImgSymbolStateControl" />
						<!--menuitem label="Symbol Spot Status" />
						<menuitem label="Symbol Freeze Selection" />
						<menuitem label="Symbol Order Cancelation" />
						<menuitem type="separator"/>
						<menuitem label="User State" />
						<menuitem type="separator"/>
						<menuitem label="Operational Bulletin" /-->
						<menuitem label="Bulletin" />
						<!--menuitem type="separator"/>
						<menuitem label="Remove Timing Schedule" />
						<menuitem type="separator"/>
						<menuitem label="Change Freeze Limits" /-->
						<menuitem label="Change Order Limits" />
						<!--menuitem type="separator"/>
						<menuitem label="Future Session" /-->
						<menuitem label="Last Day Remaining Orders" enabled="false" />
						<menuitem label="Cancel All Orders" />
					</menuitem >
					<menuitem label="Bond" >
						<menuitem label="Payment Schedule" enabled="false" />
						<menuitem label="Summary" enabled="false" />
						<menuitem label="Historical Data" enabled="false" />
					</menuitem >
					<menuitem label="Settings" >
						<menuitem label="Profile" />
						<menuitem label="Change Password" />
						<menuitem label="Printer" enabled="false" />
					</menuitem >
					<menuitem label="Charts" >
						<menuitem label="Real Time" >
							<menuitem label="Index" enabled="false" icon="ImgLiveIndex" />
							<menuitem label="Symbol" id="liveSym" icon="ImgLiveSymbol" />
						</menuitem >
						<menuitem label="Historical" >
							<menuitem label="Index" enabled="false" icon="ImgHistoricalIndex" />
							<menuitem label="Symbol" enabled="false" id="historicalSym" icon="ImgHistoricalSymbolChart" />
							<menuitem label="Volume Leaders" enabled="false" />
						</menuitem >
					</menuitem >
					<menuitem label="Help">
						<menuitem label="About Easy Trade" id="about"/>
					</menuitem >
				</fx:XMLList>
			</mx:MenuBar>
		<!--<mx:ToolBar x="0" y="20" width="100%" paddingBottom="0" paddingTop="0" verticalScrollPolicy="off">-->
		<mx:ApplicationControlBar id="toolbarMain" top="20" 
								  width="100%" height="25" 
								  horizontalCenter="0" paddingBottom="5" paddingTop="0"
								  verticalScrollPolicy="off" horizontalGap="0" verticalGap="0" 
								  >
			<mx:Spacer width="5"> 
			</mx:Spacer>
		</mx:ApplicationControlBar>
		<!--</mx:ToolBar>-->
		<components:buttonBuy left="25" top="27" buttonMode="true" click="imgBuy_clickHandler(event)"
							  mouseOut="buyImgMouseOutHandler(event)"
							  mouseOver="buyImgMouseOverHandler(event)" toolTip="Buy"
							  useHandCursor="true"/>
		<components:buttonSell id="imgSell" left="51" top="27"  buttonMode="true"
							   click="imgSell_clickHandler(event)" mouseOut="sellImgMouseOutHandler(event)"
							   mouseOver="sellImgMouseOverHandler(event)"  toolTip="Sell" useHandCursor="true" />
		
		<components:cancelButton id="imgCancel" left="77" top="27"  buttonMode="true"
								 click="imgCancel_clickHandler(event)" useHandCursor="true"
								 mouseOut="cancelImgMouseOutHandler(event)"
								 mouseOver="cancelImgMouseOverHandler(event)"
								 toolTip="Cancel"/>
		<components:buttonWorkingOrders id="imgWorkingOrders" left="105" top="27" buttonMode="true"
										click="imgWorkingOrders_clickHandler(event)" useHandCursor="true"
										mouseOut="workingOrdersImgMouseOutHandler(event)" 
										mouseOver="workingOrdersImgMouseOverHandler(event)" 
										toolTip="Working Orders"/>
		<components:buttonExecutedOrders id="imgExecutedOrders" left="135" top="28"  buttonMode="true"
										 click="imgExecutedOrders_clickHandler(event)" useHandCursor="true"
										 mouseOut="executedOrdersImgMouseOutHandler(event)"
										 mouseOver="executedOrdersImgMouseOverHandler(event)"
										 toolTip="Executed Orders"/>
		<components:buttonEventLog id="imgEventLog" left="162" top="27" buttonMode="true"
								   click="imgEventLog_clickHandler(event)"
								   mouseOut="eventLogImgMouseOutHandler(event)"
								   mouseOver="eventLogImgMouseOverHandler(event)"  
								   toolTip="Event Log"/>
		<components:buttonMarketSchdeuleControl id="imgMarketScheduleControl" left="192" top="27" 
												buttonMode="{ModelManager.getInstance().userProfileModel.isAdminUser}"
												click="imgSymbolStateControl_clickHandler(event)"
												enabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
												mouseEnabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
												mouseOut="marketScheduleControlImgMouseOutHandler(event)"
												mouseOver="marketScheduleControlImgMouseOverHandler(event)"
												toolTip="Market Schedule Control"/>
		<components:Indexes id="imgHistoricalSymbolChart" left="222" top="27"
							buttonMode="{ModelManager.getInstance().userProfileModel.isAdminUser}"
							click="imgSymbolStateControl_clickHandler(event)"
							enabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
							mouseEnabled="{ModelManager.getInstance().userProfileModel.isAdminUser}"
							toolTip="Historical Symbol Chart"/>
		<components:liveCharts id="imgLiveSymbol" left="254" top="27" buttonMode="true" enabled="false"
							   mouseEnabled="true" toolTip="Live Symbol Chart"/>
		<components:realTimeIndexCharts id="imgLiveIndex" left="285" top="27" enabled="false"
										mouseEnabled="true" 
										toolTip="Live Index Chart"/>
		<mx:Label left="737" top="24" styleName="welcomeString"
				  text=" Logged In User: {ProfileManager.getInstance().userName}               Logged In Date/Time: {dateFormatter.format(new Date())} " fontSize="11"/>
			<!--<mx:ToolBar id="toolbarMain" y="48" width="100%" height="26" borderStyle="none"
						horizontalCenter="0" paddingBottom="5" paddingTop="0"
						verticalScrollPolicy="off" backgroundColor="#e4e4e4" alpha="1" >
				<mx:Spacer width="5">
				</mx:Spacer> 
					<mx:Image id="imgBuy" source="{ImgBuy}" toolTip="Buy"
							  click="imgBuy_clickHandler(event)" width="22" height="22"
							  mouseOver="img_mouseOverHandler(event)"
							  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgSell" source="{ImgSell}" toolTip="Sell"
						  click="imgSell_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgCancel" source="{ImgCancel}" toolTip="Cancel"
						  click="imgCancel_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgWorkingOrders" source="{ImgWorkingOrders}" toolTip="Working Orders"
						  click="imgWorkingOrders_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgExecutedOrders" source="{ImgExecutedOrders}" toolTip="Executed Orders"
						  click="imgExecutedOrders_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgEventLog" source="{ImgEventLog}" toolTip="Event Log"
						  click="imgEventLog_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgMarketScheduleControl" source="{ImgMarketScheduleControl}" enabled="{ModelManager.getInstance().userProfileModel.isAdminUser}" toolTip="Market Schedule Control"
						  click="imgMarketScheduleControl_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" mouseEnabled="{ModelManager.getInstance().userProfileModel.isAdminUser}" buttonMode="{ModelManager.getInstance().userProfileModel.isAdminUser}"/>
				
				<mx:Image id="imgSymbolStateControl" source="{ImgSymbolStateControl}" enabled="{ModelManager.getInstance().userProfileModel.isAdminUser}" toolTip="Symbol State Control"
						  click="imgSymbolStateControl_clickHandler(event)" width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" mouseEnabled="{ModelManager.getInstance().userProfileModel.isAdminUser}" buttonMode="{ModelManager.getInstance().userProfileModel.isAdminUser}"/>
				
				<mx:Image id="imgHistoricalSymbolChart" source="{ImgHistoricalSymbolChart}" toolTip="Historical Symbol Chart"
						  width="22" height="22"
						  mouseOver="img_mouseOverHandler(event)"
						  mouseOut="img_mouseOutHandler(event)" buttonMode="true"/>
				
				<mx:Image id="imgLiveSymbol" source="{ImgLiveSymbol}" toolTip="Live Symbol Chart"
						  click="imgLiveSymbolChart_clickHandler(event)" 
						  mouseOver="img_mouseOverHandler(event)" width="22" height="22"
						  mouseOut="img_mouseOutHandler(event)" enabled="false" mouseEnabled="false" buttonMode="true"/>
				
				<mx:Image id="imgHistoricalIndex" source="{ImgHistoricalIndex}" toolTip="Historical Index Chart"
						  mouseOver="img_mouseOverHandler(event)" width="22" height="22"
						  mouseOut="img_mouseOutHandler(event)" enabled="false" mouseEnabled="false"/>
				
				<mx:Image id="imgLiveIndex" source="{ImgLiveIndex}" toolTip="Live Index Chart"
						  mouseOver="img_mouseOverHandler(event)" width="22" height="22"
						  mouseOut="img_mouseOutHandler(event)" enabled="false" mouseEnabled="false"  />
				
				<mx:Spacer width="420" />
				<mx:Label styleName="welcomeString"  text=" {ProfileManager.getInstance().userName} :: {dateFormatter.format(new Date())} "/>
				
				
			</mx:ToolBar>-->
</mx:Canvas>
	
	<flexlib:MDICanvas id="canvas" x="0"   width="100%" top="73" bottom="41"
					   effectsLib="{MDIVistaEffects}" horizontalScrollPolicy="off"
					   verticalScrollPolicy="off">
	</flexlib:MDICanvas>
	<s:BorderContainer 					 left="0" right="0" bottom="21" height="20" x="0" width="100%" styleName="bgNewsTapeTicker"   borderVisible="false" />
	<ticker:Ticker id="newsTapeTicker"   left="0" right="0" bottom="25" height="20" x="0" width="100%" tickerType="{TickerType.TAPE_TICKER_NEWS}"   ITEM_WIDTH="300"  ITEM_HEIGHT="20" />
	<s:BorderContainer 					 left="0" right="0" bottom="1"  height="20" x="0" width="100%" styleName="bgSymbolTapeTicker" borderVisible="true" />
	<ticker:Ticker id="symbolTapeTicker" left="0" right="0" bottom="5"  height="20" x="0" width="100%" tickerType="{TickerType.TAPE_TICKER_SYMBOL}" ITEM_WIDTH="150"  ITEM_HEIGHT="20" />
</s:Application>

<!--top="73" bottom="41" top="{headerCanvas.height}" bottom="{newsTapeTicker.height + symbolTapeTicker.height}"-->